{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY Jexactyl PANEL - jexactyl.com",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-09-30T06:45:51+00:00",
    "name": "Retroactyl Proxy",
    "author": "egg@unfazium.cloud",
    "description": "Minecraft server software selector for Proxy servers, compatible with both ARM64 and Intel or AMD-based hardware. Select from Bungeecord, Bungeecord-Geyser,Velocity, Velocity-Geyser and WaterdogPE.",
    "features": [
        "eula",
        "java_version",
        "pid_limit"
    ],
    "docker_images": {
        "Java 21": "ghcr.io\/pterodactyl\/yolks:java_21",
        "Java 17": "ghcr.io\/pterodactyl\/yolks:java_17",
        "Java 16": "ghcr.io\/pterodactyl\/yolks:java_16",
        "Java 11": "ghcr.io\/pterodactyl\/yolks:java_11",
        "Java 8": "ghcr.io\/pterodactyl\/yolks:java_8"
    },
    "file_denylist": [],
    "startup": ".\/startup.sh",
    "config": {
        "files": "{\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-ip\": \"0.0.0.0\",\r\n            \"server-port\": \"{{server.build.default.port}}\",\r\n            \"query.port\": \"{{server.build.default.port}}\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \")! For help, type \"\r\n}",
        "logs": "{}",
        "stop": "stop"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n\r\n# Ensure SERVER_SOFTWARE is defined (if it\u2019s empty, set it to Bungeecord by default)\r\nSERVER_SOFTWARE=\"${SERVER_SOFTWARE:-Bungeecord}\"\r\n\r\n# Helper function for Java installation\r\ninstall_java_21() {\r\n    if ! java -version 2>&1 | grep \"21\" &> \/dev\/null; then\r\n        echo \"Java 21 is not installed. Installing Java 21...\"\r\n        if command -v apk &> \/dev\/null; then\r\n            apk update\r\n            apk add --no-cache openjdk21\r\n        elif command -v apt-get &> \/dev\/null; then\r\n            apt-get update\r\n            apt-get install -y openjdk-21-jdk\r\n        elif command -v yum &> \/dev\/null; then\r\n            yum install -y java-21-openjdk\r\n        else\r\n            echo \"Java installation failed. Please install Java 21 manually.\"\r\n            exit 1\r\n        fi\r\n    else\r\n        echo \"Java 21 is already installed.\"\r\n    fi\r\n}\r\n\r\n# Main installation section\r\nmkdir -p \/mnt\/server\r\ncd \/mnt\/server || { echo \"Failed to navigate to \/mnt\/server\"; exit 1; }\r\n\r\ncase \"$SERVER_SOFTWARE\" in\r\n\r\n\"Bungeecord\")\r\n    echo \"Starting Bungeecord installation...\"\r\n    install_java_21\r\n\tcd \/mnt\/server\r\n\r\n\tif [ -z \"${BUNGEE_VERSION}\" ] || [ \"${BUNGEE_VERSION}\" == \"latest\" ]; then\r\n    \tBUNGEE_VERSION=\"lastStableBuild\"\r\n\tfi\r\n\r\n\tcurl -o ${SERVER_JARFILE} https:\/\/ci.md-5.net\/job\/BungeeCord\/${BUNGEE_VERSION}\/artifact\/bootstrap\/target\/BungeeCord.jar\r\n        \r\n    # Bungeecord startup command with unix_args.txt check\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -jar server.jar' > startup.sh\r\n    ;;\r\n\r\n\"Bungeecord-Geyser\")\r\n    echo \"Starting Bungeecord Geyser+Floodgate installation...\"\r\n    install_java_21\r\n\tcd \/mnt\/server\r\n\r\n\tif [ -z \"${BUNGEE_VERSION}\" ] || [ \"${BUNGEE_VERSION}\" == \"latest\" ]; then\r\n    \tBUNGEE_VERSION=\"lastStableBuild\"\r\n\tfi\r\n\r\n\tcurl -o ${SERVER_JARFILE} https:\/\/ci.md-5.net\/job\/BungeeCord\/${BUNGEE_VERSION}\/artifact\/bootstrap\/target\/BungeeCord.jar\r\n\r\n \t# Download Geyser plugin\r\n    echo \"Installing Geyser plugin...\"\r\n    mkdir -p plugins\r\n    curl -L -o plugins\/Geyser-BungeeCord.jar \\\r\n        \"https:\/\/download.geysermc.org\/v2\/projects\/geyser\/versions\/latest\/builds\/latest\/downloads\/bungeecord\"\r\n\r\n    # Download Floodgate plugin\r\n    echo \"Installing Floodgate plugin...\"\r\n    curl -L -o plugins\/floodgate-bungee.jar \\\r\n        \"https:\/\/download.geysermc.org\/v2\/projects\/floodgate\/versions\/latest\/builds\/latest\/downloads\/bungee\"\r\n        \r\n    # Bungeecord startup command with unix_args.txt check\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -jar server.jar' > startup.sh\r\n    ;;\r\n\r\n\"Velocity\")\r\n    echo \"Starting Velocity installation...\"\r\n    install_java_21\r\n    PROJECT=velocity\r\n    SERVER_JARFILE=server.jar\r\n\r\n    cd \/mnt\/server || { echo \"Failed to cd \/mnt\/server\"; exit 1; }\r\n\r\n    # Lowercase helper\r\n    lc() {\r\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\r\n    }\r\n\r\n    # If a direct download link is provided, use it\r\n    if [ -n \"${DOWNLOAD_LINK}\" ]; then\r\n        echo \"Using provided DOWNLOAD_LINK\"\r\n        DOWNLOAD_URL=\"${DOWNLOAD_LINK}\"\r\n    else\r\n        # Determine version (use latest if not specified or 'latest')\r\n        if [ -z \"${VELOCITY_VERSION}\" ] || [ \"$(lc \"$VELOCITY_VERSION\")\" = \"latest\" ]; then\r\n            VELOCITY_VERSION=$(curl -fsSL \"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\" | jq -r '.versions[-1]')\r\n            echo \"Using latest: ${VELOCITY_VERSION}\"\r\n        else\r\n            # verify user supplied version exists; if not, fall back to latest\r\n            VER_EXISTS=$(curl -fsSL \"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\" \\\r\n                | jq -r --arg v \"$VELOCITY_VERSION\" '.versions[] | select(.==$v)')\r\n            if [ -z \"$VER_EXISTS\" ]; then\r\n                echo \"Requested version ${VELOCITY_VERSION} not found \u2014 falling back to latest\"\r\n                VELOCITY_VERSION=$(curl -fsSL \"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\" | jq -r '.versions[-1]')\r\n            fi\r\n            echo \"Using Velocity version: ${VELOCITY_VERSION}\"\r\n        fi\r\n\r\n        # Fetch builds metadata for the selected version\r\n        BUILDS_JSON=$(curl -fsSL \"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${VELOCITY_VERSION}\")\r\n\r\n        # Determine build number (use latest if not specified or invalid)\r\n        if [ -z \"${BUILD_NUMBER}\" ] || [ \"$(lc \"$BUILD_NUMBER\")\" = \"latest\" ]; then\r\n            BUILD_NUMBER=$(echo \"$BUILDS_JSON\" | jq -r '.builds[-1]')\r\n            echo \"Using latest build: ${BUILD_NUMBER}\"\r\n        else\r\n            BUILD_EXISTS=$(echo \"$BUILDS_JSON\" | jq -r --arg b \"$BUILD_NUMBER\" '.builds[] | tostring | select(.==$b)')\r\n            if [ -z \"$BUILD_EXISTS\" ]; then\r\n                echo \"Requested build ${BUILD_NUMBER} not found for version ${VELOCITY_VERSION} \u2014 using latest\"\r\n                BUILD_NUMBER=$(echo \"$BUILDS_JSON\" | jq -r '.builds[-1]')\r\n            fi\r\n        fi\r\n\r\n        # Construct jar download URL\r\n        JAR_NAME=\"${PROJECT}-${VELOCITY_VERSION}-${BUILD_NUMBER}.jar\"\r\n        DOWNLOAD_URL=\"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${VELOCITY_VERSION}\/builds\/${BUILD_NUMBER}\/downloads\/${JAR_NAME}\"\r\n    fi\r\n\r\n    echo \"Download URL: ${DOWNLOAD_URL}\"\r\n\r\n    # Backup existing jar\r\n    if [ -f \"${SERVER_JARFILE}\" ]; then\r\n        echo \"Backing up existing ${SERVER_JARFILE} -> ${SERVER_JARFILE}.old\"\r\n        mv -f \"${SERVER_JARFILE}\" \"${SERVER_JARFILE}.old\"\r\n    fi\r\n\r\n    # Download Velocity jar\r\n    echo \"Downloading Velocity jar...\"\r\n    if ! curl -fSL -o \"${SERVER_JARFILE}\" \"${DOWNLOAD_URL}\"; then\r\n        echo \"Failed to download Velocity from ${DOWNLOAD_URL}\"\r\n        [ -f \"${SERVER_JARFILE}.old\" ] && mv -f \"${SERVER_JARFILE}.old\" \"${SERVER_JARFILE}\"\r\n        exit 1\r\n    fi\r\n\r\n    # velocity.toml: fetch default if missing\r\n    if [ -f velocity.toml ]; then\r\n        echo \"velocity.toml already exists\"\r\n    else\r\n        echo \"Downloading default velocity.toml\"\r\n        curl -fsSL \"https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/game_eggs\/minecraft\/proxy\/java\/velocity\/velocity.toml\" -o velocity.toml || {\r\n            echo \"Failed to fetch sample \u2014 creating minimal config\"\r\n            cat > velocity.toml <<'EOF'\r\nconfig-version = \"2.6\"\r\nmotd = \"<#09add3>A Velocity Server\"\r\nplayer-info-forwarding-mode = \"NONE\"\r\nforwarding-secret-file = \"forwarding.secret\"\r\nEOF\r\n        }\r\n    fi\r\n\r\n    # forwarding.secret: create if missing\r\n    if [ -f forwarding.secret ]; then\r\n        echo \"forwarding.secret already exists\"\r\n    else\r\n        echo \"Creating forwarding.secret\"\r\n        if command -v sha256sum >\/dev\/null 2>&1; then\r\n            date +%s | sha256sum | head -c 24 > forwarding.secret\r\n        else\r\n            head -c 24 \/dev\/urandom | base64 | tr -d '\\n' > forwarding.secret\r\n        fi\r\n    fi\r\n\r\n    # Write startup.sh \u2014 use unix_args.txt if present\r\n    if [ -f unix_args.txt ] && [ -s unix_args.txt ]; then\r\n        UARGS=$(cat unix_args.txt)\r\n        echo \"java ${UARGS} -jar ${SERVER_JARFILE}\" > startup.sh\r\n    else\r\n        echo \"java -Xms128M -XX:MaxRAMPercentage=95.0 -XX:+UseG1GC -XX:G1HeapRegionSize=4M -XX:+UnlockExperimentalVMOptions -XX:+ParallelRefProcEnabled -XX:+AlwaysPreTouch -XX:MaxInlineLevel=15 -jar ${SERVER_JARFILE}\" > startup.sh\r\n    fi\r\n    chmod +x startup.sh\r\n    ;;\r\n\r\n\"Velocity-Geyser\")\r\n    echo \"Starting Velocity Geyser+Floodgate installation...\"\r\n    install_java_21\r\n    PROJECT=velocity\r\n    SERVER_JARFILE=server.jar\r\n\r\n    cd \/mnt\/server || { echo \"Failed to cd \/mnt\/server\"; exit 1; }\r\n\r\n    # Lowercase helper\r\n    lc() {\r\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\r\n    }\r\n\r\n    # If a direct download link is provided, use it\r\n    if [ -n \"${DOWNLOAD_LINK}\" ]; then\r\n        echo \"Using provided DOWNLOAD_LINK\"\r\n        DOWNLOAD_URL=\"${DOWNLOAD_LINK}\"\r\n    else\r\n        # Determine version (use latest if not specified or 'latest')\r\n        if [ -z \"${VELOCITY_VERSION}\" ] || [ \"$(lc \"$VELOCITY_VERSION\")\" = \"latest\" ]; then\r\n            VELOCITY_VERSION=$(curl -fsSL \"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\" | jq -r '.versions[-1]')\r\n            echo \"Using latest: ${VELOCITY_VERSION}\"\r\n        else\r\n            # verify user supplied version exists; if not, fall back to latest\r\n            VER_EXISTS=$(curl -fsSL \"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\" \\\r\n                | jq -r --arg v \"$VELOCITY_VERSION\" '.versions[] | select(.==$v)')\r\n            if [ -z \"$VER_EXISTS\" ]; then\r\n                echo \"Requested version ${VELOCITY_VERSION} not found \u2014 falling back to latest\"\r\n                VELOCITY_VERSION=$(curl -fsSL \"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\" | jq -r '.versions[-1]')\r\n            fi\r\n            echo \"Using Velocity version: ${VELOCITY_VERSION}\"\r\n        fi\r\n\r\n        # Fetch builds metadata for the selected version\r\n        BUILDS_JSON=$(curl -fsSL \"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${VELOCITY_VERSION}\")\r\n\r\n        # Determine build number (use latest if not specified or invalid)\r\n        if [ -z \"${BUILD_NUMBER}\" ] || [ \"$(lc \"$BUILD_NUMBER\")\" = \"latest\" ]; then\r\n            BUILD_NUMBER=$(echo \"$BUILDS_JSON\" | jq -r '.builds[-1]')\r\n            echo \"Using latest build: ${BUILD_NUMBER}\"\r\n        else\r\n            BUILD_EXISTS=$(echo \"$BUILDS_JSON\" | jq -r --arg b \"$BUILD_NUMBER\" '.builds[] | tostring | select(.==$b)')\r\n            if [ -z \"$BUILD_EXISTS\" ]; then\r\n                echo \"Requested build ${BUILD_NUMBER} not found for version ${VELOCITY_VERSION} \u2014 using latest\"\r\n                BUILD_NUMBER=$(echo \"$BUILDS_JSON\" | jq -r '.builds[-1]')\r\n            fi\r\n        fi\r\n\r\n        # Construct jar download URL\r\n        JAR_NAME=\"${PROJECT}-${VELOCITY_VERSION}-${BUILD_NUMBER}.jar\"\r\n        DOWNLOAD_URL=\"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${VELOCITY_VERSION}\/builds\/${BUILD_NUMBER}\/downloads\/${JAR_NAME}\"\r\n    fi\r\n\r\n    echo \"Download URL: ${DOWNLOAD_URL}\"\r\n\r\n    # Backup existing jar\r\n    if [ -f \"${SERVER_JARFILE}\" ]; then\r\n        echo \"Backing up existing ${SERVER_JARFILE} -> ${SERVER_JARFILE}.old\"\r\n        mv -f \"${SERVER_JARFILE}\" \"${SERVER_JARFILE}.old\"\r\n    fi\r\n\r\n    # Download Velocity jar\r\n    echo \"Downloading Velocity jar...\"\r\n    if ! curl -fSL -o \"${SERVER_JARFILE}\" \"${DOWNLOAD_URL}\"; then\r\n        echo \"Failed to download Velocity from ${DOWNLOAD_URL}\"\r\n        [ -f \"${SERVER_JARFILE}.old\" ] && mv -f \"${SERVER_JARFILE}.old\" \"${SERVER_JARFILE}\"\r\n        exit 1\r\n    fi\r\n\r\n    # velocity.toml: fetch default if missing\r\n    if [ -f velocity.toml ]; then\r\n        echo \"velocity.toml already exists\"\r\n    else\r\n        echo \"Downloading default velocity.toml\"\r\n        curl -fsSL \"https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/game_eggs\/minecraft\/proxy\/java\/velocity\/velocity.toml\" -o velocity.toml || {\r\n            echo \"Failed to fetch sample \u2014 creating minimal config\"\r\n            cat > velocity.toml <<'EOF'\r\nconfig-version = \"2.6\"\r\nmotd = \"<#09add3>A Velocity Server\"\r\nplayer-info-forwarding-mode = \"NONE\"\r\nforwarding-secret-file = \"forwarding.secret\"\r\nEOF\r\n        }\r\n    fi\r\n\r\n    # forwarding.secret: create if missing\r\n    if [ -f forwarding.secret ]; then\r\n        echo \"forwarding.secret already exists\"\r\n    else\r\n        echo \"Creating forwarding.secret\"\r\n        if command -v sha256sum >\/dev\/null 2>&1; then\r\n            date +%s | sha256sum | head -c 24 > forwarding.secret\r\n        else\r\n            head -c 24 \/dev\/urandom | base64 | tr -d '\\n' > forwarding.secret\r\n        fi\r\n    fi\r\n\r\n \t# Download Geyser plugin\r\n    echo \"Installing Geyser plugin...\"\r\n    mkdir -p plugins\r\n    curl -L -o plugins\/Geyser-Velocity.jar \\\r\n        \"https:\/\/download.geysermc.org\/v2\/projects\/geyser\/versions\/latest\/builds\/latest\/downloads\/velocity\"\r\n\r\n    # Download Floodgate plugin\r\n    echo \"Installing Floodgate plugin...\"\r\n    curl -L -o plugins\/floodgate-velocity.jar \\\r\n        \"https:\/\/download.geysermc.org\/v2\/projects\/floodgate\/versions\/latest\/builds\/latest\/downloads\/velocity\"\r\n\r\n    # Write startup.sh \u2014 use unix_args.txt if present\r\n    if [ -f unix_args.txt ] && [ -s unix_args.txt ]; then\r\n        UARGS=$(cat unix_args.txt)\r\n        echo \"java ${UARGS} -jar ${SERVER_JARFILE}\" > startup.sh\r\n    else\r\n        echo \"java -Xms128M -XX:MaxRAMPercentage=95.0 -XX:+UseG1GC -XX:G1HeapRegionSize=4M -XX:+UnlockExperimentalVMOptions -XX:+ParallelRefProcEnabled -XX:+AlwaysPreTouch -XX:MaxInlineLevel=15 -jar ${SERVER_JARFILE}\" > startup.sh\r\n    fi\r\n    chmod +x startup.sh\r\n    ;;\r\n\r\n\"WaterdogPE\")\r\n    echo \"Starting WaterdogPE installation...\"\r\n    install_java_21\r\n    mkdir -p \/mnt\/server\r\n    cd \/mnt\/server || exit 1\r\n\r\n    # Set jar filename\r\n    SERVER_JARFILE_PE=\"Waterdog.jar\"\r\n\r\n    # Download latest WaterdogPE release from GitHub\r\n    echo \"Downloading latest Waterdog PE build...\"\r\n    curl -fSL -o \"${SERVER_JARFILE_PE}\" \\\r\n        https:\/\/github.com\/WaterdogPE\/WaterdogPE\/releases\/latest\/download\/Waterdog.jar\r\n\r\n    # Download config.yml if missing\r\n    if [ ! -f config.yml ]; then\r\n        echo \"Downloading Waterdog PE config.yml...\"\r\n        curl -fSL -o config.yml \\\r\n            https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/game_eggs\/minecraft\/proxy\/bedrock\/waterdog_pe\/config.yml\r\n    else\r\n        echo \"Waterdog PE config.yml exists \u2014 skipping\"\r\n    fi\r\n\r\n    # Write startup script pointing to correct jar\r\n    echo \"java -Dterminal.ansi=true -Xms128M -XX:MaxRAMPercentage=95.0 -jar ${SERVER_JARFILE_PE}\" > startup.sh\r\n    chmod +x startup.sh\r\n    ;;\r\n\r\n*)\r\n    echo \"Unrecognized server software: $SERVER_SOFTWARE. Defaulting to Bungeecord latest.\"\r\n    echo \"Starting Velocity installation...\"\r\n    install_java_21\r\n    PROJECT=velocity\r\n    SERVER_JARFILE=server.jar\r\n\r\n    cd \/mnt\/server || { echo \"Failed to cd \/mnt\/server\"; exit 1; }\r\n\r\n    # Lowercase helper\r\n    lc() {\r\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\r\n    }\r\n\r\n    # If a direct download link is provided, use it\r\n    if [ -n \"${DOWNLOAD_LINK}\" ]; then\r\n        echo \"Using provided DOWNLOAD_LINK\"\r\n        DOWNLOAD_URL=\"${DOWNLOAD_LINK}\"\r\n    else\r\n        # Determine version (use latest if not specified or 'latest')\r\n        if [ -z \"${VELOCITY_VERSION}\" ] || [ \"$(lc \"$VELOCITY_VERSION\")\" = \"latest\" ]; then\r\n            VELOCITY_VERSION=$(curl -fsSL \"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\" | jq -r '.versions[-1]')\r\n            echo \"Using latest: ${VELOCITY_VERSION}\"\r\n        else\r\n            # verify user supplied version exists; if not, fall back to latest\r\n            VER_EXISTS=$(curl -fsSL \"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\" \\\r\n                | jq -r --arg v \"$VELOCITY_VERSION\" '.versions[] | select(.==$v)')\r\n            if [ -z \"$VER_EXISTS\" ]; then\r\n                echo \"Requested version ${VELOCITY_VERSION} not found \u2014 falling back to latest\"\r\n                VELOCITY_VERSION=$(curl -fsSL \"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\" | jq -r '.versions[-1]')\r\n            fi\r\n            echo \"Using Velocity version: ${VELOCITY_VERSION}\"\r\n        fi\r\n\r\n        # Fetch builds metadata for the selected version\r\n        BUILDS_JSON=$(curl -fsSL \"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${VELOCITY_VERSION}\")\r\n\r\n        # Determine build number (use latest if not specified or invalid)\r\n        if [ -z \"${BUILD_NUMBER}\" ] || [ \"$(lc \"$BUILD_NUMBER\")\" = \"latest\" ]; then\r\n            BUILD_NUMBER=$(echo \"$BUILDS_JSON\" | jq -r '.builds[-1]')\r\n            echo \"Using latest build: ${BUILD_NUMBER}\"\r\n        else\r\n            BUILD_EXISTS=$(echo \"$BUILDS_JSON\" | jq -r --arg b \"$BUILD_NUMBER\" '.builds[] | tostring | select(.==$b)')\r\n            if [ -z \"$BUILD_EXISTS\" ]; then\r\n                echo \"Requested build ${BUILD_NUMBER} not found for version ${VELOCITY_VERSION} \u2014 using latest\"\r\n                BUILD_NUMBER=$(echo \"$BUILDS_JSON\" | jq -r '.builds[-1]')\r\n            fi\r\n        fi\r\n\r\n        # Construct jar download URL\r\n        JAR_NAME=\"${PROJECT}-${VELOCITY_VERSION}-${BUILD_NUMBER}.jar\"\r\n        DOWNLOAD_URL=\"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${VELOCITY_VERSION}\/builds\/${BUILD_NUMBER}\/downloads\/${JAR_NAME}\"\r\n    fi\r\n\r\n    echo \"Download URL: ${DOWNLOAD_URL}\"\r\n\r\n    # Backup existing jar\r\n    if [ -f \"${SERVER_JARFILE}\" ]; then\r\n        echo \"Backing up existing ${SERVER_JARFILE} -> ${SERVER_JARFILE}.old\"\r\n        mv -f \"${SERVER_JARFILE}\" \"${SERVER_JARFILE}.old\"\r\n    fi\r\n\r\n    # Download Velocity jar\r\n    echo \"Downloading Velocity jar...\"\r\n    if ! curl -fSL -o \"${SERVER_JARFILE}\" \"${DOWNLOAD_URL}\"; then\r\n        echo \"Failed to download Velocity from ${DOWNLOAD_URL}\"\r\n        [ -f \"${SERVER_JARFILE}.old\" ] && mv -f \"${SERVER_JARFILE}.old\" \"${SERVER_JARFILE}\"\r\n        exit 1\r\n    fi\r\n\r\n    # velocity.toml: fetch default if missing\r\n    if [ -f velocity.toml ]; then\r\n        echo \"velocity.toml already exists\"\r\n    else\r\n        echo \"Downloading default velocity.toml\"\r\n        curl -fsSL \"https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/game_eggs\/minecraft\/proxy\/java\/velocity\/velocity.toml\" -o velocity.toml || {\r\n            echo \"Failed to fetch sample \u2014 creating minimal config\"\r\n            cat > velocity.toml <<'EOF'\r\nconfig-version = \"2.6\"\r\nmotd = \"<#09add3>A Velocity Server\"\r\nplayer-info-forwarding-mode = \"NONE\"\r\nforwarding-secret-file = \"forwarding.secret\"\r\nEOF\r\n        }\r\n    fi\r\n\r\n    # forwarding.secret: create if missing\r\n    if [ -f forwarding.secret ]; then\r\n        echo \"forwarding.secret already exists\"\r\n    else\r\n        echo \"Creating forwarding.secret\"\r\n        if command -v sha256sum >\/dev\/null 2>&1; then\r\n            date +%s | sha256sum | head -c 24 > forwarding.secret\r\n        else\r\n            head -c 24 \/dev\/urandom | base64 | tr -d '\\n' > forwarding.secret\r\n        fi\r\n    fi\r\n\r\n    # Write startup.sh \u2014 use unix_args.txt if present\r\n    if [ -f unix_args.txt ] && [ -s unix_args.txt ]; then\r\n        UARGS=$(cat unix_args.txt)\r\n        echo \"java ${UARGS} -jar ${SERVER_JARFILE}\" > startup.sh\r\n    else\r\n        echo \"java -Xms128M -XX:MaxRAMPercentage=95.0 -XX:+UseG1GC -XX:G1HeapRegionSize=4M -XX:+UnlockExperimentalVMOptions -XX:+ParallelRefProcEnabled -XX:+AlwaysPreTouch -XX:MaxInlineLevel=15 -jar ${SERVER_JARFILE}\" > startup.sh\r\n    fi\r\n    chmod +x startup.sh\r\n    ;;\r\nesac\r\n\r\n# Final setup and permissions\r\nchmod +x startup.sh\r\necho \"The installation process has been completed. Please click the Start button to continue.\"",
            "container": "ghcr.io\/pterodactyl\/installers:alpine",
            "entrypoint": "ash"
        }
    },
    "variables": [
        {
            "name": "Minecraft Version",
            "description": "Installs the latest version of Minecraft for your selected server software",
            "env_variable": "MINECRAFT_VERSION",
            "default_value": "Latest",
            "user_viewable": true,
            "user_editable": false,
            "rules": "nullable|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Server Software",
            "description": "Write the server software to install: Bungeecord, Bungeecord-Geyser, Velocity, Velocity-Geyser or WaterdogPE",
            "env_variable": "SERVER_SOFTWARE",
            "default_value": "Bungeecord",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:100",
            "field_type": "text"
        },
        {
            "name": "Download Path",
            "description": "A URL to use to download a server.jar rather than the ones in the install script. This is not user viewable.",
            "env_variable": "DL_PATH",
            "default_value": "",
            "user_viewable": false,
            "user_editable": false,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Build Number",
            "description": "",
            "env_variable": "BUILD_NUMBER",
            "default_value": "latest",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Bungeecord Version",
            "description": "The version of Bungeecord to download and use.",
            "env_variable": "BUNGEE_VERSION",
            "default_value": "latest",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|alpha_num|between:1,6",
            "field_type": "text"
        },
        {
            "name": "Server Jar File",
            "description": "",
            "env_variable": "SERVER_JARFILE",
            "default_value": "server.jar",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|regex:\/^([\\w\\d._-]+)(\\.jar)$\/",
            "field_type": "text"
        },
        {
            "name": "Velocity Version",
            "description": "The Velocity Proxy version to download.\r\nSet to 'latest ' the download the last stable build.",
            "env_variable": "VELOCITY_VERSION",
            "default_value": "latest",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Geyser Port",
            "description": "The UDP port that Geyser will listen on\r\n\"-1\" will forcibly stop Geyser\r\n\"server\" will have Geyser listen on the same port as the TCP server",
            "env_variable": "GEYSER_PORT",
            "default_value": "19132",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|max:6",
            "field_type": "text"
        },
        {
            "name": "Waterdog PE Version",
            "description": "The build to pull and install. (Ex. 23), or set to latest\r\nThis is the build number on https:\/\/jenkins.waterdog.dev\/",
            "env_variable": "WATERDOG_VERSION",
            "default_value": "latest",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Server Jar File PE",
            "description": "The jar to run to WaterdogPE",
            "env_variable": "SERVER_JARFILE_PE",
            "default_value": "server.jar",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|max:20",
            "field_type": "text"
        }
    ]
}
