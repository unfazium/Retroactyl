{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY Jexactyl PANEL - jexactyl.com",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-09-30T02:27:05+00:00",
    "name": "Retroactyl Java",
    "author": "egg@unfazium.cloud",
    "description": "A Multi-Egg server software selector for Minecraft Java Edition including compatibility with both ARM64 and Intel\/AMD based hardware.\r\nSelect from Folia, Paper, Spigot, Purpur, Pufferfish, Forge, Fabric, Quilt, Mohist, Magma or Vanilla Minecraft.",
    "features": [
        "eula",
        "java_version",
        "pid_limit"
    ],
    "docker_images": {
        "Java 21": "ghcr.io\/pterodactyl\/yolks:java_21",
        "Java 17": "ghcr.io\/pterodactyl\/yolks:java_17",
        "Java 16": "ghcr.io\/pterodactyl\/yolks:java_16",
        "Java 11": "ghcr.io\/pterodactyl\/yolks:java_11",
        "Java 8": "ghcr.io\/pterodactyl\/yolks:java_8"
    },
    "file_denylist": [],
    "startup": ".\/startup.sh",
    "config": {
        "files": "{\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-ip\": \"0.0.0.0\",\r\n            \"server-port\": \"{{server.build.default.port}}\",\r\n            \"query.port\": \"{{server.build.default.port}}\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \")! For help, type \"\r\n}",
        "logs": "{}",
        "stop": "stop"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n\r\n# Ensure SERVER_SOFTWARE is defined (if it\u2019s empty, set it to Paper by default)\r\nSERVER_SOFTWARE=\"${SERVER_SOFTWARE:-Paper}\"\r\n\r\n# Helper function for Java installation\r\ninstall_java_21() {\r\n    if ! java -version 2>&1 | grep \"21\" &> \/dev\/null; then\r\n        echo \"Java 21 is not installed. Installing Java 21...\"\r\n        if command -v apk &> \/dev\/null; then\r\n            apk update\r\n            apk add --no-cache openjdk21\r\n        elif command -v apt-get &> \/dev\/null; then\r\n            apt-get update\r\n            apt-get install -y openjdk-21-jdk\r\n        elif command -v yum &> \/dev\/null; then\r\n            yum install -y java-21-openjdk\r\n        else\r\n            echo \"Java installation failed. Please install Java 21 manually.\"\r\n            exit 1\r\n        fi\r\n    else\r\n        echo \"Java 21 is already installed.\"\r\n    fi\r\n}\r\n\r\n# Main installation section\r\nmkdir -p \/mnt\/server\r\ncd \/mnt\/server || { echo \"Failed to navigate to \/mnt\/server\"; exit 1; }\r\n\r\ncase \"$SERVER_SOFTWARE\" in\r\n\r\n\"Folia\")\r\n    echo \"Starting Folia installation...\"\r\n    install_java_21\r\n    PROJECT=folia\r\n    SERVER_JARFILE=server.jar\r\n    MINECRAFT_VERSION=${MINECRAFT_VERSION:-Latest}\r\n\r\n    # Determine download URL\r\n    if [ -n \"${DL_PATH}\" ]; then\r\n        DOWNLOAD_URL=`eval echo $(echo ${DL_PATH} | sed -e 's\/{{\/${\/g' -e 's\/}}\/}\/g')`\r\n    else\r\n        # Check if specified version exists\r\n        VER_EXISTS=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT} | jq -r --arg VERSION $MINECRAFT_VERSION '.versions[] | contains($VERSION)' | grep -m1 true)\r\n        LATEST_VERSION=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT} | jq -r '.versions[-1]')\r\n\r\n        if [ \"${VER_EXISTS}\" == \"true\" ]; then\r\n            echo \"Version is valid. Using version ${MINECRAFT_VERSION}\"\r\n        else\r\n            echo \"Defaulting to latest ${PROJECT} version. For custom versions, checkout our FAQs.\"\r\n            MINECRAFT_VERSION=${LATEST_VERSION}\r\n        fi\r\n\r\n        # Check if specified build exists\r\n        BUILD_EXISTS=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${MINECRAFT_VERSION} | jq -r --arg BUILD ${BUILD_NUMBER} '.builds[] | tostring | contains($BUILD)' | grep -m1 true)\r\n        LATEST_BUILD=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${MINECRAFT_VERSION} | jq -r '.builds[-1]')\r\n\r\n        if [ \"${BUILD_EXISTS}\" == \"true\" ]; then\r\n            echo \"Build is valid for version ${MINECRAFT_VERSION}. Using build ${BUILD_NUMBER}\"\r\n        else\r\n            echo \"Using the latest ${PROJECT} build for version ${MINECRAFT_VERSION} from PaperMC.\"\r\n            BUILD_NUMBER=${LATEST_BUILD}\r\n        fi\r\n\r\n        JAR_NAME=${PROJECT}-${MINECRAFT_VERSION}-${BUILD_NUMBER}.jar\r\n        DOWNLOAD_URL=\"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${MINECRAFT_VERSION}\/builds\/${BUILD_NUMBER}\/downloads\/${JAR_NAME}\"\r\n    fi\r\n\r\n    cd \/mnt\/server || exit 1\r\n\r\n    echo \"Downloading Folia from $DOWNLOAD_URL\"\r\n    if [ -f ${SERVER_JARFILE} ]; then\r\n        mv ${SERVER_JARFILE} ${SERVER_JARFILE}.old\r\n    fi\r\n\r\n    curl -o ${SERVER_JARFILE} ${DOWNLOAD_URL}\r\n\r\n    # Download server.properties if missing\r\n    if [ ! -f server.properties ]; then\r\n        echo \"Downloading MC server.properties\"\r\n        curl -o server.properties https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/minecraft\/java\/server.properties\r\n    fi\r\n\r\n    # Folia startup command\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n    ;;\r\n\r\n\"Paper\")\r\n    echo \"Starting Paper installation...\"\r\n    install_java_21\r\n    PROJECT=paper\r\n    SERVER_JARFILE=server.jar\r\n\r\n    # STEP 1: Fetch list of versions\r\n    VERSIONS_JSON=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT})\r\n    VERSIONS=$(echo \"$VERSIONS_JSON\" | jq -r '.versions[]')\r\n\r\n    # STEP 2: Find the latest stable version (skip anything with -rc, -pre, etc.)\r\n    SPIGOT_LATEST_STABLE_VERSION=\"\"\r\n    idx=$(echo \"$VERSIONS\" | wc -l)\r\n\r\n    while [ \"$idx\" -gt 0 ]; do\r\n        VERSION=$(echo \"$VERSIONS\" | sed -n \"${idx}p\")\r\n        case \"$VERSION\" in\r\n            *-*) \r\n                # skip pre-release versions\r\n                ;;\r\n            *)\r\n                SPIGOT_LATEST_STABLE_VERSION=$VERSION\r\n                break\r\n                ;;\r\n        esac\r\n        idx=$((idx - 1))\r\n    done\r\n\r\n    if [ -z \"$SPIGOT_LATEST_STABLE_VERSION\" ]; then\r\n        echo \"Error: Could not find a stable Paper version!\"\r\n        exit 1\r\n    fi\r\n\r\n    echo \"Latest stable Paper version: $SPIGOT_LATEST_STABLE_VERSION\"\r\n    echo \"For custom versions, checkout our FAQs.\"\r\n\r\n    # STEP 3: Fetch builds for that version\r\n    BUILDS_JSON=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${SPIGOT_LATEST_STABLE_VERSION}\/builds)\r\n    BUILD_NUMBER=$(echo \"$BUILDS_JSON\" | jq -r '.builds[-1].build')\r\n    JAR_FILE_ID=$(echo \"$BUILDS_JSON\" | jq -r '.builds[-1].downloads.application.name')\r\n\r\n    if [ -z \"$BUILD_NUMBER\" ] || [ -z \"$JAR_FILE_ID\" ] || [ \"$JAR_FILE_ID\" = \"null\" ]; then\r\n        echo \"Error: Failed to resolve build for version $SPIGOT_LATEST_STABLE_VERSION\"\r\n        exit 1\r\n    fi\r\n\r\n    echo \"Using build #$BUILD_NUMBER with jar: $JAR_FILE_ID\"\r\n\r\n    # STEP 4: Construct download URL\r\n    DOWNLOAD_URL=\"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${SPIGOT_LATEST_STABLE_VERSION}\/builds\/${BUILD_NUMBER}\/downloads\/${JAR_FILE_ID}\"\r\n\r\n    # STEP 5: Download Paper\r\n    cd \/mnt\/server || exit 1\r\n    if [ -f \"${SERVER_JARFILE}\" ]; then\r\n        mv \"${SERVER_JARFILE}\" \"${SERVER_JARFILE}.old\"\r\n    fi\r\n\r\n    echo \"Downloading Paper from $DOWNLOAD_URL\"\r\n    curl -L -o \"${SERVER_JARFILE}\" \"${DOWNLOAD_URL}\"\r\n\r\n    # STEP 6: server.properties\r\n    if [ ! -f server.properties ]; then\r\n        echo \"Downloading MC server.properties\"\r\n        curl -o server.properties https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/minecraft\/java\/server.properties\r\n    fi\r\n\r\n    # STEP 7: Startup command\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n    chmod +x startup.sh\r\n    ;;\r\n\r\n\"Spigot\")\r\n    echo \"Starting Spigot installation...\"\r\n    SERVER_JARFILE=server.jar\r\n    MINECRAFT_VERSION=${MINECRAFT_VERSION:-Latest}\r\n\r\n    # Install Java 21\r\n    install_java_21\r\n\r\n    cd \/mnt\/server || exit 1\r\n\r\n    # Normalize Latest to lowercase 'latest'\r\n    if [ \"$MINECRAFT_VERSION\" = \"Latest\" ] || [ \"$MINECRAFT_VERSION\" = \"latest\" ]; then\r\n        echo \"Using specified Minecraft version: $MINECRAFT_VERSION\"\r\n        MINECRAFT_VERSION=\"latest\"\r\n    fi\r\n\r\n    # Download BuildTools\r\n    echo \"Downloading BuildTools for Spigot...\"\r\n    curl -L \"https:\/\/hub.spigotmc.org\/jenkins\/job\/BuildTools\/lastSuccessfulBuild\/artifact\/target\/BuildTools.jar\" -o BuildTools.jar\r\n\r\n    # Ensure minimum memory for building\r\n    SERVER_MEMORY=${SERVER_MEMORY:-1024}\r\n    if [ \"$SERVER_MEMORY\" -lt 1024 ]; then\r\n        echo \"SERVER_MEMORY too low, defaulting to 1024MB\"\r\n        SERVER_MEMORY=1024\r\n    fi\r\n\r\n    # Attempt to build Spigot\r\n    echo \"Building Spigot version $MINECRAFT_VERSION... (this may take a while)\"\r\n    echo \"For custom versions, checkout our FAQs.\"\r\n    if ! java -Xmx${SERVER_MEMORY}M -jar BuildTools.jar --rev \"$MINECRAFT_VERSION\"; then\r\n        echo \"'$MINECRAFT_VERSION' not recognized by BuildTools. Fetching latest stable version...\"\r\n        # BusyBox-safe fallback: extract first version number from HTML\r\n        MINECRAFT_VERSION=$(curl -s https:\/\/hub.spigotmc.org\/versions\/ | grep -o '[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+' | head -n1)\r\n        echo \"Resolved latest stable version: $MINECRAFT_VERSION\"\r\n        java -Xmx${SERVER_MEMORY}M -jar BuildTools.jar --rev \"$MINECRAFT_VERSION\" || {\r\n            echo \"Spigot build failed. Please check if version $MINECRAFT_VERSION is valid.\"\r\n            exit 1\r\n        }\r\n    fi\r\n\r\n    # Move built Spigot jar to server.jar\r\n    if ls spigot-*.jar 1> \/dev\/null 2>&1; then\r\n        mv spigot-*.jar \"$SERVER_JARFILE\"\r\n        echo \"Spigot jar is ready: $SERVER_JARFILE\"\r\n    else\r\n        echo \"No Spigot jar found after build. Exiting.\"\r\n        exit 1\r\n    fi\r\n\r\n    # Create startup script\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n    ;;\r\n\r\n\"Purpur\")\r\n    echo \"Starting Purpur installation...\"\r\n    install_java_21\r\n    PROJECT=purpur\r\n\r\n    if [ -n \"${DL_PATH}\" ]; then\r\n    echo -e \"Using supplied download url: ${DL_PATH}\"\r\n    DOWNLOAD_URL=$(eval echo $(echo ${DL_PATH} | sed -e 's\/{{\/${\/g' -e 's\/}}\/}\/g'))\r\n    else\r\n    VER_EXISTS=$(curl -s https:\/\/api.purpurmc.org\/v2\/${PROJECT} | jq -r --arg VERSION $MINECRAFT_VERSION '.versions[] | contains($VERSION)' | grep true)\r\n    LATEST_VERSION=$(curl -s https:\/\/api.purpurmc.org\/v2\/${PROJECT} | jq -r '.versions' | jq -r '.[-1]')\r\n\r\n    if [ \"${VER_EXISTS}\" == \"true\" ]; then\r\n        echo -e \"Version is valid. Using version ${MINECRAFT_VERSION}\"\r\n    else\r\n        echo -e \"Defaulting to latest ${PROJECT} version. For custom versions, checkout our FAQs.\"\r\n        MINECRAFT_VERSION=${LATEST_VERSION}\r\n    fi\r\n        \r\n    BUILD_EXISTS=$(curl -s https:\/\/api.purpurmc.org\/v2\/${PROJECT}\/${MINECRAFT_VERSION} | jq -r --arg BUILD ${BUILD_NUMBER} '.builds.all | tostring | contains($BUILD)' | grep true)\r\n    LATEST_BUILD=$(curl -s https:\/\/api.purpurmc.org\/v2\/${PROJECT}\/${MINECRAFT_VERSION} | jq -r '.builds.latest')\r\n        \r\n    if [ \"${BUILD_EXISTS}\" == \"true\" ]; then\r\n        echo -e \"Build is valid for version ${MINECRAFT_VERSION}. Using build ${BUILD_NUMBER}\"\r\n    else\r\n        echo -e \"Using the latest ${PROJECT} build for version ${MINECRAFT_VERSION} from PurpurMC.\"\r\n        BUILD_NUMBER=${LATEST_BUILD}\r\n    fi\r\n        \r\n    JAR_NAME=${PROJECT}-${MINECRAFT_VERSION}-${BUILD_NUMBER}.jar\r\n        \r\n    echo -e \"Build Number: ${BUILD_NUMBER}\"\r\n    echo -e \"JAR Name of Build: ${JAR_NAME}\"\r\n    DOWNLOAD_URL=https:\/\/api.purpurmc.org\/v2\/${PROJECT}\/${MINECRAFT_VERSION}\/${BUILD_NUMBER}\/download\r\n    fi\r\n\r\n    cd \/mnt\/server\r\n\r\n    echo -e \"Running curl -o ${JAR_NAME} ${DOWNLOAD_URL}\"\r\n\r\n    if [ -f ${JAR_NAME} ]; then\r\n    mv ${JAR_NAME} ${JAR_NAME}.old\r\n    fi\r\n\r\n    curl -o ${JAR_NAME} ${DOWNLOAD_URL}\r\n\r\n    # Ensure ${SERVER_JARFILE} points to the correct downloaded jar\r\n    SERVER_JARFILE=${JAR_NAME}\r\n\r\n    if [ ! -f server.properties ]; then\r\n    echo -e \"Downloading MC server.properties\"\r\n    curl -o server.properties https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/minecraft\/java\/server.properties\r\n    fi\r\n\r\n\t# Rename the jar file to server.jar\r\n    DEFAULT_JAR=$(ls *.jar | head -n 1)\r\n    if [[ -f \"$DEFAULT_JAR\" ]]; then\r\n        mv \"$DEFAULT_JAR\" server.jar\r\n        echo \"Renamed $DEFAULT_JAR to server.jar.\"\r\n    else\r\n        echo \"No server jar file found after installation.\"\r\n        exit 1\r\n    fi\r\n\r\n    # Purpur startup command with unix_args.txt check\r\n    echo 'java --add-modules=jdk.incubator.vector -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n    ;;\r\n\r\n\"Pufferfish\")\r\n    echo \"Starting Pufferfish installation...\"\r\n    install_java_21\r\n\r\n    # Install required packages for Alpine\r\n    echo \"Installing required packages...\"\r\n    apk add --no-cache curl jq\r\n\r\n    cd \/mnt\/server || exit 1\r\n\r\n    # Detect latest Pufferfish branch automatically\r\n    echo \"Detecting latest Pufferfish branch...\"\r\n    BASE_VERSION=21\r\n    while true; do\r\n        URL=\"https:\/\/ci.pufferfish.host\/job\/Pufferfish-1.$BASE_VERSION\/\"\r\n        if curl -s \"$URL\" | grep -q \"Not Found\"; then\r\n            LATEST_BRANCH=$((BASE_VERSION - 1))\r\n            echo \"Latest valid Pufferfish branch: 1.$LATEST_BRANCH\"\r\n            break\r\n        fi\r\n        BASE_VERSION=$((BASE_VERSION + 1))\r\n    done\r\n    BASE_URL=\"https:\/\/ci.pufferfish.host\/job\/Pufferfish-1.$LATEST_BRANCH\"\r\n\r\n    # Fetch latest build number from latest branch\r\n    echo \"Fetching latest build number for branch 1.$LATEST_BRANCH...\"\r\n    BUILD_NUMBER=$(curl -s \"$BASE_URL\/api\/json\" | jq -r '.lastBuild.number')\r\n    if [ -z \"$BUILD_NUMBER\" ]; then\r\n        echo \"Failed to fetch latest build number.\"\r\n        exit 1\r\n    fi\r\n    echo \"Latest build number: $BUILD_NUMBER\"\r\n\r\n    # Fetch latest Minecraft version from that build\r\n    echo \"Fetching latest Minecraft version for build $BUILD_NUMBER...\"\r\n    MC_VERSION=$(curl -s \"$BASE_URL\/$BUILD_NUMBER\/\" | grep -oE 'pufferfish-paperclip-[0-9]+\\.[0-9]+\\.[0-9]+-R0\\.1-SNAPSHOT-mojmap\\.jar' | head -n1 | sed -E 's\/pufferfish-paperclip-([0-9]+\\.[0-9]+\\.[0-9]+)-R0\\.1-SNAPSHOT-mojmap\\.jar\/\\1\/')\r\n    if [ -z \"$MC_VERSION\" ]; then\r\n        echo \"Failed to fetch Minecraft version for build $BUILD_NUMBER.\"\r\n        exit 1\r\n    fi\r\n    echo \"Latest Minecraft version: $MC_VERSION\"\r\n    echo \"For custom versions, checkout our FAQs.\"\r\n\r\n    # Construct download URL\r\n    DOWNLOAD_URL=\"$BASE_URL\/$BUILD_NUMBER\/artifact\/pufferfish-server\/build\/libs\/pufferfish-paperclip-$MC_VERSION-R0.1-SNAPSHOT-mojmap.jar\"\r\n    echo \"Downloading latest build: $DOWNLOAD_URL\"\r\n    curl -L -o \"server.jar\" \"$DOWNLOAD_URL\" || { echo \"Download failed.\"; exit 1; }\r\n\r\n    # Pufferfish startup command\r\n    echo 'java -Xms4096M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:InitiatingHeapOccupancyPercent=15 -Dusing.aikars.flags=https:\/\/mcflags.emc.gs -Daikars.new.flags=true -jar server.jar nogui' > startup.sh\r\n    ;;\r\n\r\n\"Forge\")\r\n    echo \"Starting Forge installation...\"\r\n    install_java_21\r\n\r\n    # Fetch Forge promotions JSON\r\n    JSON_DATA=$(curl -sSL https:\/\/files.minecraftforge.net\/maven\/net\/minecraftforge\/forge\/promotions_slim.json)\r\n\r\n    # Get the latest recommended Forge version (e.g., 50.1.0)\r\n    FORGE_VERSION=$(echo \"$JSON_DATA\" | jq -r '.promos | to_entries[] | select(.key | test(\"-recommended$\")) | .value' | sort -V | tail -n1)\r\n\r\n    if [[ -z \"$FORGE_VERSION\" || \"$FORGE_VERSION\" == \"null\" ]]; then\r\n        echo \"Unable to determine the latest recommended Forge version. Exiting.\"\r\n        exit 1\r\n    fi\r\n\r\n    # Get the corresponding Minecraft version for that Forge version (e.g., 1.21.8)\r\n    MC_VERSION=$(echo \"$JSON_DATA\" | jq -r \".promos | to_entries[] | select(.value == \\\"$FORGE_VERSION\\\") | .key\" | cut -d '-' -f 1)\r\n\r\n    if [[ -z \"$MC_VERSION\" || \"$MC_VERSION\" == \"null\" ]]; then\r\n        echo \"Unable to determine the Minecraft version for Forge $FORGE_VERSION. Exiting.\"\r\n        exit 1\r\n    fi\r\n\r\n    # Combine them like 1.21.8-50.1.0\r\n    FULL_VERSION=\"$MC_VERSION-$FORGE_VERSION\"\r\n    echo \"Latest Forge version: $FULL_VERSION\"\r\n    echo \"For custom versions, checkout our FAQs.\"\r\n\r\n    # Construct the download URL\r\n    DOWNLOAD_LINK=\"https:\/\/maven.minecraftforge.net\/net\/minecraftforge\/forge\/${FULL_VERSION}\/forge-${FULL_VERSION}-installer.jar\"\r\n\r\n    echo \"Downloading Forge from $DOWNLOAD_LINK\"\r\n    curl -o installer.jar \"$DOWNLOAD_LINK\"\r\n    java -jar installer.jar --installServer\r\n    rm installer.jar\r\n    echo \"Forge installation complete.\"\r\n\r\n    # Rename the jar file to server.jar\r\n    DEFAULT_JAR=$(ls *.jar | grep -v \"installer.jar\" | head -n 1)\r\n    if [[ -f \"$DEFAULT_JAR\" ]]; then\r\n        mv \"$DEFAULT_JAR\" server.jar\r\n        echo \"Renamed $DEFAULT_JAR to server.jar.\"\r\n    else\r\n        echo \"No server jar file found after installation.\"\r\n        exit 1\r\n    fi\r\n\r\n    # Forge startup command with unix_args.txt check\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true $( [ ! -f unix_args.txt ] && printf %s \"-jar server.jar\" || printf %s \"@unix_args.txt\" )' > startup.sh\r\n    ;;\r\n\r\n\"Fabric\")\r\n    echo \"Starting Fabric installation...\"\r\n    install_java_21\r\n    SERVER_JARFILE=server.jar\r\n\r\n    # Determine Minecraft version\r\n    if [ -z \"$MC_VERSION\" ] || [ \"$MC_VERSION\" = \"latest\" ]; then\r\n        MC_VERSION=$(curl -sSL https:\/\/meta.fabricmc.net\/v2\/versions\/game | jq -r '.[] | select(.stable==true) | .version' | head -n1)\r\n    elif [ \"$MC_VERSION\" = \"snapshot\" ]; then\r\n        MC_VERSION=$(curl -sSL https:\/\/meta.fabricmc.net\/v2\/versions\/game | jq -r '.[] | select(.stable==false) | .version' | head -n1)\r\n    fi\r\n\r\n    if [ -z \"$MC_VERSION\" ] || [ \"$MC_VERSION\" = \"null\" ]; then\r\n        echo \"Unable to determine the Minecraft version for Fabric. Exiting.\"\r\n        exit 1\r\n    fi\r\n\r\n    echo \"Latest Minecraft version for Fabric: $MC_VERSION\"\r\n    echo \"For custom versions, checkout our FAQs.\"\r\n\r\n    # Determine Fabric installer version\r\n    if [ -z \"$FABRIC_VERSION\" ] || [ \"$FABRIC_VERSION\" = \"latest\" ]; then\r\n        FABRIC_VERSION=$(curl -sSL https:\/\/meta.fabricmc.net\/v2\/versions\/installer | jq -r '.[0].version')\r\n    fi\r\n\r\n    # Determine Loader version\r\n    if [ -z \"$LOADER_VERSION\" ] || [ \"$LOADER_VERSION\" = \"latest\" ]; then\r\n        LOADER_VERSION=$(curl -sSL https:\/\/meta.fabricmc.net\/v2\/versions\/loader | jq -r '.[] | select(.stable==true) | .version' | head -n1)\r\n    elif [ \"$LOADER_VERSION\" = \"snapshot\" ]; then\r\n        LOADER_VERSION=$(curl -sSL https:\/\/meta.fabricmc.net\/v2\/versions\/loader | jq -r '.[] | select(.stable==false) | .version' | head -n1)\r\n    fi\r\n\r\n    # Download Fabric installer\r\n    DOWNLOAD_LINK=\"https:\/\/maven.fabricmc.net\/net\/fabricmc\/fabric-installer\/$FABRIC_VERSION\/fabric-installer-$FABRIC_VERSION.jar\"\r\n    echo \"Downloading Fabric installer from $DOWNLOAD_LINK\"\r\n    curl -o installer.jar \"$DOWNLOAD_LINK\"\r\n\r\n    # Run Fabric installer\r\n    java -jar installer.jar server -mcversion \"$MC_VERSION\" -loader \"$LOADER_VERSION\" -downloadMinecraft\r\n    rm installer.jar\r\n    echo \"Fabric installation complete.\"\r\n\r\n    # Rename jars properly (Fabric launcher as server.jar, vanilla as minecraft-server.jar)\r\n    if [ -f server.jar ]; then\r\n        mv server.jar \"minecraft-server-$MC_VERSION.jar\"\r\n    fi\r\n    if [ -f fabric-server-launch.jar ]; then\r\n        mv fabric-server-launch.jar server.jar\r\n    fi\r\n\r\n    # Write fabric-server-launcher.properties to point to vanilla jar\r\n    if [ -f \"minecraft-server-$MC_VERSION.jar\" ]; then\r\n        echo \"serverJar=minecraft-server-$MC_VERSION.jar\" > fabric-server-launcher.properties\r\n    fi\r\n\r\n    # Fabric startup command\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n    ;;\r\n\r\n\"Quilt\")\r\n    echo \"Starting Quilt installation...\"\r\n    install_java_21\r\n    SERVER_JARFILE=server.jar\r\n\r\n    # Determine Minecraft version\r\n    MC_VERSION=${MC_VERSION:-latest}\r\n    if [ \"$MC_VERSION\" = \"latest\" ]; then\r\n        MC_VERSION=$(curl -sSL https:\/\/meta.fabricmc.net\/v2\/versions\/game | jq -r '.[] | select(.stable==true) | .version' | head -n1)\r\n    fi\r\n\r\n    echo \"Latest Minecraft version for Quilt: $MC_VERSION\"\r\n    echo \"For custom versions, checkout our FAQs.\"\r\n\r\n    # Download Quilt installer\r\n    DOWNLOAD_LINK=\"https:\/\/quiltmc.org\/api\/v1\/download-latest-installer\/java-universal\"\r\n    echo \"Downloading Quilt installer from $DOWNLOAD_LINK\"\r\n    curl -L -o installer.jar \"$DOWNLOAD_LINK\"\r\n\r\n    # Run Quilt installer\r\n    java -jar installer.jar install server \"$MC_VERSION\" --download-server\r\n\r\n    # Move files from temporary server folder\r\n    if [ -d \"\/mnt\/server\/server\" ]; then\r\n        mv \/mnt\/server\/server\/* \/mnt\/server\/\r\n        rm -rf \/mnt\/server\/server\r\n    fi\r\n    rm installer.jar\r\n\r\n    # Rename jars to match server.jar convention\r\n    if [ -f \"server.jar\" ]; then\r\n        mv server.jar minecraft.jar\r\n        mv quilt-server-launch.jar server.jar\r\n        echo \"serverJar=minecraft.jar\" > quilt-server-launcher.properties\r\n        echo \"Renamed jars and created launcher properties.\"\r\n    else\r\n        echo \"No server jar found after installation. Exiting.\"\r\n        exit 1\r\n    fi\r\n\r\n    # Startup command with unix_args.txt check\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true $( [ ! -f unix_args.txt ] && printf %s \"-jar server.jar\" || printf %s \"@unix_args.txt\" )' > startup.sh\r\n    ;;\r\n\r\n\"Mohist\")\r\n    echo \"Starting Mohist installation...\"\r\n    install_java_21\r\n    SERVER_DIR=${SERVER_DIR:-\/mnt\/server}\r\n    SERVER_JARFILE=${SERVER_JARFILE:-server.jar}\r\n\r\n    # Ensure server directory exists\r\n    mkdir -p \"$SERVER_DIR\"\r\n    cd \"$SERVER_DIR\" || { echo \"Failed to change directory to $SERVER_DIR\"; exit 1; }\r\n\r\n    # Install required Alpine packages\r\n    echo \"Installing required packages...\"\r\n    apk add --no-cache curl jq\r\n\r\n    # Step 1: Grab the latest supported MC version from GitHub default branch\r\n    MC_VERSION=$(curl -s https:\/\/api.github.com\/repos\/Rz-C\/Mohist | jq -r .default_branch)\r\n\r\n    if [ -z \"$MC_VERSION\" ]; then\r\n        echo \"Failed to detect latest Mohist MC version.\"\r\n        exit 1\r\n    fi\r\n    echo \"Latest supported Minecraft version: $MC_VERSION\"\r\n    echo \"For custom versions, checkout our FAQs.\"\r\n\r\n    # Step 2: Get latest build number for that MC version from Mohist API\r\n    BUILD_VERSION=$(curl -s \"https:\/\/api.mohistmc.com\/project\/mohist\/${MC_VERSION}\/builds\" \\\r\n      | jq -r '.[0].id')\r\n\r\n    if [ -z \"$BUILD_VERSION\" ] || [ \"$BUILD_VERSION\" = \"null\" ]; then\r\n        echo \"Failed to fetch latest build number for $MC_VERSION.\"\r\n        exit 1\r\n    fi\r\n    echo \"Latest build number for $MC_VERSION: $BUILD_VERSION\"\r\n\r\n    # Step 3: Construct the download link\r\n    DOWNLOAD_LINK=\"https:\/\/api.mohistmc.com\/project\/mohist\/${MC_VERSION}\/builds\/${BUILD_VERSION}\/download\"\r\n    echo \"Download link is $DOWNLOAD_LINK\"\r\n    echo \"Downloading Mohist build...\"\r\n\r\n    # Download server jar\r\n    curl -sSL -o \"$SERVER_JARFILE\" \"$DOWNLOAD_LINK\"\r\n\r\n    # Verify download\r\n    if [ ! -s \"$SERVER_JARFILE\" ]; then\r\n        echo \"Error downloading Mohist build.\"\r\n        exit 1\r\n    fi\r\n\r\n    # Create startup script\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n    ;;\r\n\r\n\"Magma\")\r\n    echo \"Starting Magma installation...\"\r\n    install_java_21\r\n    SERVER_DIR=${SERVER_DIR:-\/mnt\/server}\r\n    SERVER_JARFILE=${SERVER_JARFILE:-server.jar}\r\n\r\n    # Ensure server directory exists\r\n    mkdir -p \"$SERVER_DIR\"\r\n    cd \"$SERVER_DIR\" || { echo \"Failed to change directory to $SERVER_DIR\"; exit 1; }\r\n\r\n    # Install required Alpine packages\r\n    echo \"Installing required packages...\"\r\n    apk add --no-cache curl jq\r\n\r\n    # Fetch latest Magma version from Magma API\r\n    echo \"Fetching latest Magma version information...\"\r\n    LATEST_JSON=$(curl -sSL \"https:\/\/magmafoundation.org\/api\/versions?limit=1\")\r\n\r\n    # Check for API errors\r\n    if echo \"$LATEST_JSON\" | grep -q \"error\"; then\r\n        ERROR_MESSAGE=$(echo \"$LATEST_JSON\" | jq -r '.error \/\/ \"Unknown error\"')\r\n        echo \"Magma API error: $ERROR_MESSAGE\"\r\n        exit 1\r\n    fi\r\n\r\n    # Get the latest version string and launcher URL\r\n    MC_VERSION=$(echo \"$LATEST_JSON\" | jq -r '.versions[0].version')\r\n    LAUNCHER_URL=$(echo \"$LATEST_JSON\" | jq -r '.versions[0].launcherUrl')\r\n\r\n    echo \"Latest supported Minecraft version: $MC_VERSION\"\r\n    echo \"For custom versions, checkout our FAQs.\"\r\n\r\n    if [ -z \"$MC_VERSION\" ] || [ -z \"$LAUNCHER_URL\" ] || [ \"$LAUNCHER_URL\" = \"null\" ]; then\r\n        echo \"Failed to find latest Magma version or launcher URL. Exiting.\"\r\n        exit 1\r\n    fi\r\n\r\n    # Download the pre-patched launcher JAR\r\n    echo \"Downloading Magma launcher JAR: $LAUNCHER_URL\"\r\n    curl -sSL -o \"$SERVER_JARFILE\" \"$LAUNCHER_URL\"\r\n\r\n    if [ ! -s \"$SERVER_JARFILE\" ]; then\r\n        echo \"Error downloading Magma launcher JAR.\"\r\n        exit 1\r\n    fi\r\n\r\n    # Verify server.jar is valid\r\n    if ! java -jar \"$SERVER_JARFILE\" --version >\/dev\/null 2>&1; then\r\n        echo \"Error: server.jar is invalid or corrupt.\"\r\n        exit 1\r\n    fi\r\n\r\n    # Set permissions\r\n    chmod +x \"$SERVER_JARFILE\"\r\n\r\n    # Create startup script\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n    chmod +x startup.sh\r\n    ;;\r\n\r\n\"Vanilla\")\r\n    echo \"Starting Vanilla installation...\"\r\n    # Server Files: \/mnt\/server\r\n\tmkdir -p \/mnt\/server\r\n\tcd \/mnt\/server\r\n\r\n\tLATEST_VERSION=`curl https:\/\/launchermeta.mojang.com\/mc\/game\/version_manifest.json | jq -r '.latest.release'`\r\n\tLATEST_SNAPSHOT_VERSION=`curl https:\/\/launchermeta.mojang.com\/mc\/game\/version_manifest.json | jq -r '.latest.snapshot'`\r\n\r\n\techo -e \"Latest supported Minecraft version: $LATEST_VERSION\"\r\n    echo \"For custom versions, checkout our FAQs.\"\r\n\r\n\tif [ -z \"$VANILLA_VERSION\" ] || [ \"$VANILLA_VERSION\" == \"Latest\" ]; then\r\n  \tMANIFEST_URL=$(curl -sSL https:\/\/launchermeta.mojang.com\/mc\/game\/version_manifest.json | jq --arg VERSION $LATEST_VERSION -r '.versions | .[] | select(.id== $VERSION )|.url')\r\n\telif [ \"$VANILLA_VERSION\" == \"snapshot\" ]; then\r\n  \tMANIFEST_URL=$(curl -sSL https:\/\/launchermeta.mojang.com\/mc\/game\/version_manifest.json | jq --arg VERSION $LATEST_SNAPSHOT_VERSION -r '.versions | .[] | select(.id== $VERSION )|.url')\r\n\telse\r\n  \tMANIFEST_URL=$(curl -sSL https:\/\/launchermeta.mojang.com\/mc\/game\/version_manifest.json | jq --arg VERSION $VANILLA_VERSION -r '.versions | .[] | select(.id== $VERSION )|.url')\r\n\tfi\r\n\r\n\tDOWNLOAD_URL=$(curl ${MANIFEST_URL} | jq .downloads.server | jq -r '. | .url')\r\n\r\n\techo -e \"running: curl -o server.jar $DOWNLOAD_URL\"\r\n\tcurl -o server.jar $DOWNLOAD_URL\r\n\r\n    # Vanilla startup command with unix_args.txt check\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -jar server.jar' > startup.sh\r\n    ;;\r\n\r\n*)\r\n    echo \"Unrecognized server software: $SERVER_SOFTWARE. Defaulting to latest Paper.\"\r\n    echo \"Starting Paper installation...\"\r\n    install_java_21\r\n    PROJECT=paper\r\n    SERVER_JARFILE=server.jar\r\n\r\n    # STEP 1: Fetch list of versions\r\n    VERSIONS_JSON=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT})\r\n    VERSIONS=$(echo \"$VERSIONS_JSON\" | jq -r '.versions[]')\r\n\r\n    # STEP 2: Find the latest stable version (skip anything with -rc, -pre, etc.)\r\n    SPIGOT_LATEST_STABLE_VERSION=\"\"\r\n    idx=$(echo \"$VERSIONS\" | wc -l)\r\n\r\n    while [ \"$idx\" -gt 0 ]; do\r\n        VERSION=$(echo \"$VERSIONS\" | sed -n \"${idx}p\")\r\n        case \"$VERSION\" in\r\n            *-*) \r\n                # skip pre-release versions\r\n                ;;\r\n            *)\r\n                SPIGOT_LATEST_STABLE_VERSION=$VERSION\r\n                break\r\n                ;;\r\n        esac\r\n        idx=$((idx - 1))\r\n    done\r\n\r\n    if [ -z \"$SPIGOT_LATEST_STABLE_VERSION\" ]; then\r\n        echo \"Error: Could not find a stable Paper version!\"\r\n        exit 1\r\n    fi\r\n\r\n    echo \"Latest stable Paper version: $SPIGOT_LATEST_STABLE_VERSION\"\r\n    echo \"For custom versions, checkout our FAQs.\"\r\n\r\n    # STEP 3: Fetch builds for that version\r\n    BUILDS_JSON=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${SPIGOT_LATEST_STABLE_VERSION}\/builds)\r\n    BUILD_NUMBER=$(echo \"$BUILDS_JSON\" | jq -r '.builds[-1].build')\r\n    JAR_FILE_ID=$(echo \"$BUILDS_JSON\" | jq -r '.builds[-1].downloads.application.name')\r\n\r\n    if [ -z \"$BUILD_NUMBER\" ] || [ -z \"$JAR_FILE_ID\" ] || [ \"$JAR_FILE_ID\" = \"null\" ]; then\r\n        echo \"Error: Failed to resolve build for version $SPIGOT_LATEST_STABLE_VERSION\"\r\n        exit 1\r\n    fi\r\n\r\n    echo \"Using build #$BUILD_NUMBER with jar: $JAR_FILE_ID\"\r\n\r\n    # STEP 4: Construct download URL\r\n    DOWNLOAD_URL=\"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${SPIGOT_LATEST_STABLE_VERSION}\/builds\/${BUILD_NUMBER}\/downloads\/${JAR_FILE_ID}\"\r\n\r\n    # STEP 5: Download Paper\r\n    cd \/mnt\/server || exit 1\r\n    if [ -f \"${SERVER_JARFILE}\" ]; then\r\n        mv \"${SERVER_JARFILE}\" \"${SERVER_JARFILE}.old\"\r\n    fi\r\n\r\n    echo \"Downloading Paper from $DOWNLOAD_URL\"\r\n    curl -L -o \"${SERVER_JARFILE}\" \"${DOWNLOAD_URL}\"\r\n\r\n    # STEP 6: server.properties\r\n    if [ ! -f server.properties ]; then\r\n        echo \"Downloading MC server.properties\"\r\n        curl -o server.properties https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/minecraft\/java\/server.properties\r\n    fi\r\n\r\n    # STEP 7: Startup command\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n    chmod +x startup.sh\r\n    ;;\r\n\r\nesac\r\n\r\n# Final setup and permissions\r\nchmod +x startup.sh\r\necho \"The installation process has been completed. Please click the Start button to continue.\"",
            "container": "ghcr.io\/pterodactyl\/installers:alpine",
            "entrypoint": "ash"
        }
    },
    "variables": [
        {
            "name": "Minecraft Version",
            "description": "Installs the latest version of Minecraft for your selected server software",
            "env_variable": "MINECRAFT_VERSION",
            "default_value": "Latest",
            "user_viewable": true,
            "user_editable": false,
            "rules": "nullable|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Server Software",
            "description": "Write the server software to install: Folia, Paper, Spigot, Purpur, Pufferfish, Forge, Fabric, Quilt, Mohist, Magma or Vanilla",
            "env_variable": "SERVER_SOFTWARE",
            "default_value": "Paper",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Download Path",
            "description": "A URL to use to download a server.jar rather than the ones in the install script. This is not user viewable.",
            "env_variable": "DL_PATH",
            "default_value": "",
            "user_viewable": false,
            "user_editable": false,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Build Number",
            "description": "The build number for the paper release.\r\n\r\nLeave at latest to always get the latest version. Invalid versions will default to latest.",
            "env_variable": "BUILD_NUMBER",
            "default_value": "latest",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Spigot Version",
            "description": "The version of Spigot to download (using the --rev tag from https:\/\/hub.spigotmc.org\/versions). Use \"latest\" for latest.",
            "env_variable": "DL_VERSION",
            "default_value": "latest",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|between:3,10",
            "field_type": "text"
        },
        {
            "name": "Server Jar File",
            "description": "The name of the server jarfile to run the server with.",
            "env_variable": "SERVER_JARFILE",
            "default_value": "server.jar",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|regex:\/^([\\w\\d._-]+)(\\.jar)$\/",
            "field_type": "text"
        }
    ]
}
