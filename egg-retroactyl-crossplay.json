{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY Jexactyl PANEL - jexactyl.com",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-09-30T02:27:08+00:00",
    "name": "Retroactyl Crossplay",
    "author": "egg@unfazium.cloud",
    "description": "A Multi-Egg server software selector for Minecraft Java Edition including compatibility with both ARM64 and Intel\/AMD based hardware. Select from Paper Geyser, Spigot Geyser, Purpur Geyser, Fabric Geyser or NeoForge Geyser.",
    "features": [
        "eula",
        "java_version",
        "pid_limit"
    ],
    "docker_images": {
        "Java 21": "ghcr.io\/pterodactyl\/yolks:java_21"
    },
    "file_denylist": [],
    "startup": ".\/startup.sh",
    "config": {
        "files": "{\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-ip\": \"0.0.0.0\",\r\n            \"server-port\": \"{{server.build.default.port}}\",\r\n            \"query.port\": \"{{server.build.default.port}}\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \")! For help, type \"\r\n}",
        "logs": "{}",
        "stop": "stop"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n\r\n# Ensure SERVER_SOFTWARE is defined (if it\u2019s empty, set it to Paper by default)\r\nSERVER_SOFTWARE=\"${SERVER_SOFTWARE:-Paper}\"\r\n\r\n# Helper function for Java installation\r\ninstall_java_21() {\r\n    if ! java -version 2>&1 | grep \"21\" &> \/dev\/null; then\r\n        echo \"Java 21 is not installed. Installing Java 21...\"\r\n        if command -v apk &> \/dev\/null; then\r\n            apk update\r\n            apk add --no-cache openjdk21\r\n        elif command -v apt-get &> \/dev\/null; then\r\n            apt-get update\r\n            apt-get install -y openjdk-21-jdk\r\n        elif command -v yum &> \/dev\/null; then\r\n            yum install -y java-21-openjdk\r\n        else\r\n            echo \"Java installation failed. Please install Java 21 manually.\"\r\n            exit 1\r\n        fi\r\n    else\r\n        echo \"Java 21 is already installed.\"\r\n    fi\r\n}\r\n\r\n# Main installation section\r\nmkdir -p \/mnt\/server\r\ncd \/mnt\/server || { echo \"Failed to navigate to \/mnt\/server\"; exit 1; }\r\n\r\ncase \"$SERVER_SOFTWARE\" in\r\n\r\n\"Paper\")\r\n    echo \"Starting Paper Geyser+Floodgate installation...\"\r\n    install_java_21\r\n    PROJECT=paper\r\n    SERVER_JARFILE=server.jar\r\n\r\n    # STEP 1: Fetch list of versions\r\n    VERSIONS_JSON=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT})\r\n    VERSIONS=$(echo \"$VERSIONS_JSON\" | jq -r '.versions[]')\r\n\r\n    # STEP 2: Find the latest stable version (skip anything with -rc, -pre, etc.)\r\n    SPIGOT_LATEST_STABLE_VERSION=\"\"\r\n    idx=$(echo \"$VERSIONS\" | wc -l)\r\n\r\n    while [ \"$idx\" -gt 0 ]; do\r\n        VERSION=$(echo \"$VERSIONS\" | sed -n \"${idx}p\")\r\n        case \"$VERSION\" in\r\n            *-*) \r\n                # skip pre-release versions\r\n                ;;\r\n            *)\r\n                SPIGOT_LATEST_STABLE_VERSION=$VERSION\r\n                break\r\n                ;;\r\n        esac\r\n        idx=$((idx - 1))\r\n    done\r\n\r\n    if [ -z \"$SPIGOT_LATEST_STABLE_VERSION\" ]; then\r\n        echo \"Error: Could not find a stable Paper version!\"\r\n        exit 1\r\n    fi\r\n\r\n    echo \"Latest stable Paper version: $SPIGOT_LATEST_STABLE_VERSION\"\r\n    echo \"For custom versions, checkout our FAQs.\"\r\n\r\n    # STEP 3: Fetch builds for that version\r\n    BUILDS_JSON=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${SPIGOT_LATEST_STABLE_VERSION}\/builds)\r\n    BUILD_NUMBER=$(echo \"$BUILDS_JSON\" | jq -r '.builds[-1].build')\r\n    JAR_FILE_ID=$(echo \"$BUILDS_JSON\" | jq -r '.builds[-1].downloads.application.name')\r\n\r\n    if [ -z \"$BUILD_NUMBER\" ] || [ -z \"$JAR_FILE_ID\" ] || [ \"$JAR_FILE_ID\" = \"null\" ]; then\r\n        echo \"Error: Failed to resolve build for version $SPIGOT_LATEST_STABLE_VERSION\"\r\n        exit 1\r\n    fi\r\n\r\n    echo \"Using build #$BUILD_NUMBER with jar: $JAR_FILE_ID\"\r\n\r\n    # STEP 4: Construct download URL\r\n    DOWNLOAD_URL=\"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${SPIGOT_LATEST_STABLE_VERSION}\/builds\/${BUILD_NUMBER}\/downloads\/${JAR_FILE_ID}\"\r\n\r\n    # STEP 5: Download Paper\r\n    cd \/mnt\/server || exit 1\r\n    if [ -f \"${SERVER_JARFILE}\" ]; then\r\n        mv \"${SERVER_JARFILE}\" \"${SERVER_JARFILE}.old\"\r\n    fi\r\n\r\n    echo \"Downloading Paper from $DOWNLOAD_URL\"\r\n    curl -L -o \"${SERVER_JARFILE}\" \"${DOWNLOAD_URL}\"\r\n\r\n    # STEP 6: server.properties\r\n    if [ ! -f server.properties ]; then\r\n        echo \"Downloading MC server.properties\"\r\n        curl -o server.properties https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/minecraft\/java\/server.properties\r\n    fi\r\n\r\n \t# STEP 7: Download Geyser plugin\r\n    echo \"Installing Geyser plugin...\"\r\n    mkdir -p plugins\r\n    curl -L -o plugins\/Geyser-Spigot.jar \\\r\n        \"https:\/\/download.geysermc.org\/v2\/projects\/geyser\/versions\/latest\/builds\/latest\/downloads\/spigot\"\r\n\r\n    # STEP 8: Download Floodgate plugin\r\n    echo \"Installing Floodgate plugin...\"\r\n    mkdir -p plugins\r\n    curl -L -o plugins\/floodgate-spigot.jar \\\r\n        \"https:\/\/download.geysermc.org\/v2\/projects\/floodgate\/versions\/latest\/builds\/latest\/downloads\/spigot\"\r\n\r\n    # STEP 9: Startup command\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n    chmod +x startup.sh\r\n    ;;\r\n\r\n\"Spigot\")\r\n    echo \"Starting Spigot Geyser+Floodgate installation...\"\r\n    SERVER_JARFILE=server.jar\r\n    MINECRAFT_VERSION=${MINECRAFT_VERSION:-Latest}\r\n\r\n    # Install Java 21\r\n    install_java_21\r\n\r\n    cd \/mnt\/server || exit 1\r\n\r\n    # Normalize Latest to lowercase 'latest'\r\n    if [ \"$MINECRAFT_VERSION\" = \"Latest\" ] || [ \"$MINECRAFT_VERSION\" = \"latest\" ]; then\r\n        echo \"Using specified Minecraft version: $MINECRAFT_VERSION\"\r\n        MINECRAFT_VERSION=\"latest\"\r\n    fi\r\n\r\n    # Download BuildTools\r\n    echo \"Downloading BuildTools for Spigot...\"\r\n    curl -L \"https:\/\/hub.spigotmc.org\/jenkins\/job\/BuildTools\/lastSuccessfulBuild\/artifact\/target\/BuildTools.jar\" -o BuildTools.jar\r\n\r\n    # Ensure minimum memory for building\r\n    SERVER_MEMORY=${SERVER_MEMORY:-1024}\r\n    if [ \"$SERVER_MEMORY\" -lt 1024 ]; then\r\n        echo \"SERVER_MEMORY too low, defaulting to 1024MB\"\r\n        SERVER_MEMORY=1024\r\n    fi\r\n\r\n    # Attempt to build Spigot\r\n    echo \"Building Spigot version $MINECRAFT_VERSION... (this may take a while)\"\r\n    echo \"For custom versions, checkout our FAQs.\"\r\n    if ! java -Xmx${SERVER_MEMORY}M -jar BuildTools.jar --rev \"$MINECRAFT_VERSION\"; then\r\n        echo \"'$MINECRAFT_VERSION' not recognized by BuildTools. Fetching latest stable version...\"\r\n        # BusyBox-safe fallback: extract first version number from HTML\r\n        MINECRAFT_VERSION=$(curl -s https:\/\/hub.spigotmc.org\/versions\/ | grep -o '[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+' | head -n1)\r\n        echo \"Resolved latest stable version: $MINECRAFT_VERSION\"\r\n        java -Xmx${SERVER_MEMORY}M -jar BuildTools.jar --rev \"$MINECRAFT_VERSION\" || {\r\n            echo \"Spigot build failed. Please check if version $MINECRAFT_VERSION is valid.\"\r\n            exit 1\r\n        }\r\n    fi\r\n\r\n    # Move built Spigot jar to server.jar\r\n    if ls spigot-*.jar 1> \/dev\/null 2>&1; then\r\n        mv spigot-*.jar \"$SERVER_JARFILE\"\r\n        echo \"Spigot jar is ready: $SERVER_JARFILE\"\r\n    else\r\n        echo \"No Spigot jar found after build. Exiting.\"\r\n        exit 1\r\n    fi\r\n\r\n \t# Download Geyser plugin\r\n    echo \"Installing Geyser plugin...\"\r\n    mkdir -p plugins\r\n    curl -L -o plugins\/Geyser-Spigot.jar \\\r\n        \"https:\/\/download.geysermc.org\/v2\/projects\/geyser\/versions\/latest\/builds\/latest\/downloads\/spigot\"\r\n\r\n    # STEP 8: Download Floodgate plugin\r\n    echo \"Installing Floodgate plugin...\"\r\n    mkdir -p plugins\r\n    curl -L -o plugins\/floodgate-spigot.jar \\\r\n        \"https:\/\/download.geysermc.org\/v2\/projects\/floodgate\/versions\/latest\/builds\/latest\/downloads\/spigot\"\r\n\r\n    # Create startup script\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n    ;;\r\n\r\n\"Purpur\")\r\n    echo \"Starting Purpur Geyser+Floodgate installation...\"\r\n    install_java_21\r\n    PROJECT=purpur\r\n\r\n    if [ -n \"${DL_PATH}\" ]; then\r\n    echo -e \"Using supplied download url: ${DL_PATH}\"\r\n    DOWNLOAD_URL=$(eval echo $(echo ${DL_PATH} | sed -e 's\/{{\/${\/g' -e 's\/}}\/}\/g'))\r\n    else\r\n    VER_EXISTS=$(curl -s https:\/\/api.purpurmc.org\/v2\/${PROJECT} | jq -r --arg VERSION $MINECRAFT_VERSION '.versions[] | contains($VERSION)' | grep true)\r\n    LATEST_VERSION=$(curl -s https:\/\/api.purpurmc.org\/v2\/${PROJECT} | jq -r '.versions' | jq -r '.[-1]')\r\n\r\n    if [ \"${VER_EXISTS}\" == \"true\" ]; then\r\n        echo -e \"Version is valid. Using version ${MINECRAFT_VERSION}\"\r\n    else\r\n        echo -e \"Defaulting to latest ${PROJECT} version. For custom versions, checkout our FAQs.\"\r\n        MINECRAFT_VERSION=${LATEST_VERSION}\r\n    fi\r\n        \r\n    BUILD_EXISTS=$(curl -s https:\/\/api.purpurmc.org\/v2\/${PROJECT}\/${MINECRAFT_VERSION} | jq -r --arg BUILD ${BUILD_NUMBER} '.builds.all | tostring | contains($BUILD)' | grep true)\r\n    LATEST_BUILD=$(curl -s https:\/\/api.purpurmc.org\/v2\/${PROJECT}\/${MINECRAFT_VERSION} | jq -r '.builds.latest')\r\n        \r\n    if [ \"${BUILD_EXISTS}\" == \"true\" ]; then\r\n        echo -e \"Build is valid for version ${MINECRAFT_VERSION}. Using build ${BUILD_NUMBER}\"\r\n    else\r\n        echo -e \"Using the latest ${PROJECT} build for version ${MINECRAFT_VERSION} from PurpurMC.\"\r\n        BUILD_NUMBER=${LATEST_BUILD}\r\n    fi\r\n        \r\n    JAR_NAME=${PROJECT}-${MINECRAFT_VERSION}-${BUILD_NUMBER}.jar\r\n        \r\n    echo -e \"Build Number: ${BUILD_NUMBER}\"\r\n    echo -e \"JAR Name of Build: ${JAR_NAME}\"\r\n    DOWNLOAD_URL=https:\/\/api.purpurmc.org\/v2\/${PROJECT}\/${MINECRAFT_VERSION}\/${BUILD_NUMBER}\/download\r\n    fi\r\n\r\n    cd \/mnt\/server\r\n\r\n    echo -e \"Running curl -o ${JAR_NAME} ${DOWNLOAD_URL}\"\r\n\r\n    if [ -f ${JAR_NAME} ]; then\r\n    mv ${JAR_NAME} ${JAR_NAME}.old\r\n    fi\r\n\r\n    curl -o ${JAR_NAME} ${DOWNLOAD_URL}\r\n\r\n    # Ensure ${SERVER_JARFILE} points to the correct downloaded jar\r\n    SERVER_JARFILE=${JAR_NAME}\r\n\r\n    if [ ! -f server.properties ]; then\r\n    echo -e \"Downloading MC server.properties\"\r\n    curl -o server.properties https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/minecraft\/java\/server.properties\r\n    fi\r\n\r\n\t# Rename the jar file to server.jar\r\n    DEFAULT_JAR=$(ls *.jar | head -n 1)\r\n    if [[ -f \"$DEFAULT_JAR\" ]]; then\r\n        mv \"$DEFAULT_JAR\" server.jar\r\n        echo \"Renamed $DEFAULT_JAR to server.jar.\"\r\n    else\r\n        echo \"No server jar file found after installation.\"\r\n        exit 1\r\n    fi\r\n\r\n\t# Download Geyser plugin\r\n    echo \"Installing Geyser plugin...\"\r\n    mkdir -p plugins\r\n    curl -L -o plugins\/Geyser-Spigot.jar \\\r\n        \"https:\/\/download.geysermc.org\/v2\/projects\/geyser\/versions\/latest\/builds\/latest\/downloads\/spigot\"\r\n\r\n    # Download Floodgate plugin\r\n    echo \"Installing Floodgate plugin...\"\r\n    mkdir -p plugins\r\n    curl -L -o plugins\/floodgate-spigot.jar \\\r\n        \"https:\/\/download.geysermc.org\/v2\/projects\/floodgate\/versions\/latest\/builds\/latest\/downloads\/spigot\"\r\n\r\n    # Purpur startup command with unix_args.txt check\r\n    echo 'java --add-modules=jdk.incubator.vector -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n    ;;\r\n\r\n\"Fabric\")\r\n    echo \"Starting Fabric Geyser+Floodgate installation...\"\r\n    install_java_21\r\n    SERVER_JARFILE=server.jar\r\n\r\n    # Determine Minecraft version\r\n    if [ -z \"$MC_VERSION\" ] || [ \"$MC_VERSION\" = \"latest\" ]; then\r\n        MC_VERSION=$(curl -sSL https:\/\/meta.fabricmc.net\/v2\/versions\/game | jq -r '.[] | select(.stable==true) | .version' | head -n1)\r\n    elif [ \"$MC_VERSION\" = \"snapshot\" ]; then\r\n        MC_VERSION=$(curl -sSL https:\/\/meta.fabricmc.net\/v2\/versions\/game | jq -r '.[] | select(.stable==false) | .version' | head -n1)\r\n    fi\r\n\r\n    if [ -z \"$MC_VERSION\" ] || [ \"$MC_VERSION\" = \"null\" ]; then\r\n        echo \"Unable to determine the Minecraft version for Fabric. Exiting.\"\r\n        exit 1\r\n    fi\r\n\r\n    echo \"Latest Minecraft version for Fabric: $MC_VERSION\"\r\n    echo \"For custom versions, checkout our FAQs.\"\r\n\r\n    # Determine Fabric installer version\r\n    if [ -z \"$FABRIC_VERSION\" ] || [ \"$FABRIC_VERSION\" = \"latest\" ]; then\r\n        FABRIC_VERSION=$(curl -sSL https:\/\/meta.fabricmc.net\/v2\/versions\/installer | jq -r '.[0].version')\r\n    fi\r\n\r\n    # Determine Loader version\r\n    if [ -z \"$LOADER_VERSION\" ] || [ \"$LOADER_VERSION\" = \"latest\" ]; then\r\n        LOADER_VERSION=$(curl -sSL https:\/\/meta.fabricmc.net\/v2\/versions\/loader | jq -r '.[] | select(.stable==true) | .version' | head -n1)\r\n    elif [ \"$LOADER_VERSION\" = \"snapshot\" ]; then\r\n        LOADER_VERSION=$(curl -sSL https:\/\/meta.fabricmc.net\/v2\/versions\/loader | jq -r '.[] | select(.stable==false) | .version' | head -n1)\r\n    fi\r\n\r\n    # Download Fabric installer\r\n    DOWNLOAD_LINK=\"https:\/\/maven.fabricmc.net\/net\/fabricmc\/fabric-installer\/$FABRIC_VERSION\/fabric-installer-$FABRIC_VERSION.jar\"\r\n    echo \"Downloading Fabric installer from $DOWNLOAD_LINK\"\r\n    curl -o installer.jar \"$DOWNLOAD_LINK\"\r\n\r\n    # Run Fabric installer\r\n    java -jar installer.jar server -mcversion \"$MC_VERSION\" -loader \"$LOADER_VERSION\" -downloadMinecraft\r\n    rm installer.jar\r\n    echo \"Fabric installation complete.\"\r\n\r\n    # Rename jars properly (Fabric launcher as server.jar, vanilla as minecraft-server.jar)\r\n    if [ -f server.jar ]; then\r\n        mv server.jar \"minecraft-server-$MC_VERSION.jar\"\r\n    fi\r\n    if [ -f fabric-server-launch.jar ]; then\r\n        mv fabric-server-launch.jar server.jar\r\n    fi\r\n\r\n    echo \"Renamed jar file to server.jar\"\r\n\r\n    # Write fabric-server-launcher.properties to point to vanilla jar\r\n    if [ -f \"minecraft-server-$MC_VERSION.jar\" ]; then\r\n        echo \"serverJar=minecraft-server-$MC_VERSION.jar\" > fabric-server-launcher.properties\r\n    fi\r\n\r\n    # Download Geyser mod\r\n    echo \"Installing Geyser mod...\"\r\n    mkdir -p mods\r\n    curl -L -o mods\/Geyser-Fabric.jar \\\r\n        \"https:\/\/download.geysermc.org\/v2\/projects\/geyser\/versions\/latest\/builds\/latest\/downloads\/fabric\"\r\n\r\n    # Download Floodgate mod\r\n    echo \"Installing Floodgate mod...\"\r\n    FLOODGATE_URL=$(curl -sSL \"https:\/\/api.modrinth.com\/v2\/project\/floodgate\/version\" \\\r\n      | jq -r --arg ver \"$MC_VERSION\" '.[] | select(.loaders[]? == \"fabric\" and (.game_versions[]? == $ver)) | .files[0].url' \\\r\n      | head -n1)\r\n\r\n    if [ -n \"$FLOODGATE_URL\" ] && [ \"$FLOODGATE_URL\" != \"null\" ]; then\r\n        FLOODGATE_FILE=$(basename \"$FLOODGATE_URL\")\r\n        echo \"Downloading Floodgate: $FLOODGATE_FILE\"\r\n        curl -L -o \"mods\/$FLOODGATE_FILE\" \"$FLOODGATE_URL\"\r\n    else\r\n        echo \"No Floodgate build found for Minecraft $MC_VERSION\"\r\n    fi\r\n\r\n    # Download Fabric API\r\n    echo \"Fetching latest Fabric API for Minecraft $MC_VERSION...\"\r\n    FABRIC_API_URL=$(curl -sSL \"https:\/\/api.modrinth.com\/v2\/project\/fabric-api\/version\" \\\r\n      | jq -r --arg ver \"$MC_VERSION\" '.[] | select(.game_versions[]? == $ver) | .files[0].url' | head -n1)\r\n\r\n    FABRIC_API_FILE=$(basename \"$FABRIC_API_URL\")\r\n\r\n    if [ -n \"$FABRIC_API_URL\" ] && [ \"$FABRIC_API_URL\" != \"null\" ]; then\r\n        echo \"Downloading Fabric API: $FABRIC_API_FILE\"\r\n        curl -L -o \"mods\/$FABRIC_API_FILE\" \"$FABRIC_API_URL\"\r\n    else\r\n        echo \"No Fabric API found for Minecraft $MC_VERSION\"\r\n    fi\r\n\r\n    # Accept Minecraft EULA automatically\r\n    if [ -f eula.txt ]; then\r\n        sed -i 's\/eula=false\/eula=true\/g' eula.txt\r\n    else\r\n        echo \"eula=true\" > eula.txt\r\n    fi\r\n\r\n    echo \"Accepting Minecraft EULA...\"\r\n\r\n    # Fabric startup command\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n    ;;\r\n\r\n\"NeoForge\")\r\n    echo \"Starting NeoForge Geyser+Floodgate installation...\"\r\n    install_java_21\r\n    SERVER_JARFILE=server.jar\r\n\r\n    # Determine Minecraft version\r\n    if [ -z \"$MC_VERSION\" ] || [ \"$MC_VERSION\" = \"latest\" ]; then\r\n        MC_VERSION=$(curl -sSL https:\/\/meta.fabricmc.net\/v2\/versions\/game | jq -r '.[] | select(.stable==true) | .version' | head -n1)\r\n    elif [ \"$MC_VERSION\" = \"snapshot\" ]; then\r\n        MC_VERSION=$(curl -sSL https:\/\/meta.fabricmc.net\/v2\/versions\/game | jq -r '.[] | select(.stable==false) | .version' | head -n1)\r\n    fi\r\n\r\n    if [ -z \"$MC_VERSION\" ] || [ \"$MC_VERSION\" = \"null\" ]; then\r\n        echo \"Unable to determine the Minecraft version. Exiting.\"\r\n        exit 1\r\n    fi\r\n\r\n    echo \"Latest Minecraft version: $MC_VERSION\"\r\n    echo \"For custom versions, checkout our FAQs.\"\r\n\r\n    # Download NeoForge installer\r\n    echo \"Fetching latest NeoForge installer...\"\r\n    LATEST_VERSION=$(curl -sSL https:\/\/maven.neoforged.net\/releases\/net\/neoforged\/neoforge\/ \\\r\n        | grep -oE '[0-9]+\\.[0-9]+\\.[0-9]+\/' \\\r\n        | sort -V | tail -n1 | tr -d '\/')\r\n\r\n    NEOFORGE_JAR_NAME=\"neoforge-${LATEST_VERSION}-installer.jar\"\r\n    NEOFORGE_DOWNLOAD_URL=\"https:\/\/maven.neoforged.net\/releases\/net\/neoforged\/neoforge\/${LATEST_VERSION}\/${NEOFORGE_JAR_NAME}\"\r\n\r\n    # Echo download url and download the installer\r\n    echo \"Downloading NeoForge installer: $NEOFORGE_JAR_NAME\"\r\n    curl -L -o \"$NEOFORGE_JAR_NAME\" \"$NEOFORGE_DOWNLOAD_URL\"\r\n\r\n    # Run NeoForge installer\r\n    java -jar \"$NEOFORGE_JAR_NAME\" --installServer\r\n\r\n    # Remove NeoForge installer and run.bat file\r\n    rm \"$NEOFORGE_JAR_NAME\"\r\n    echo \"Removing NeoForge Installer.\"\r\n    rm run.bat\r\n    echo \"Removing run.bat file.\"\r\n\r\n    # Echo completion of installtion\r\n    echo \"NeoForge installation complete.\"\r\n\r\n    # Download Geyser mod for NeoForge\r\n    echo \"Installing Geyser mod...\"\r\n    mkdir -p mods\r\n    curl -L -o mods\/Geyser-NeoForge.jar \\\r\n        \"https:\/\/download.geysermc.org\/v2\/projects\/geyser\/versions\/latest\/builds\/latest\/downloads\/neoforge\"\r\n\r\n    # Download Floodgate mod for NeoForge\r\n    echo \"Installing Floodgate mod...\"\r\n    FLOODGATE_URL=$(curl -sSL \"https:\/\/api.modrinth.com\/v2\/project\/floodgate\/version\" \\\r\n      | jq -r --arg ver \"$MC_VERSION\" '.[] | select(.loaders[]? == \"neoforge\" and (.game_versions[]? == $ver)) | .files[0].url' \\\r\n      | head -n1)\r\n\r\n    if [ -n \"$FLOODGATE_URL\" ] && [ \"$FLOODGATE_URL\" != \"null\" ]; then\r\n        FLOODGATE_FILE=$(basename \"$FLOODGATE_URL\")\r\n        echo \"Downloading Floodgate: $FLOODGATE_FILE\"\r\n        curl -L -o \"mods\/$FLOODGATE_FILE\" \"$FLOODGATE_URL\"\r\n    else\r\n        echo \"No Floodgate build found for Minecraft $MC_VERSION\"\r\n    fi\r\n\r\n    # NeoForge startup command\r\n    echo '.\/run.sh' > startup.sh\r\n    ;;\r\n\r\n*)\r\n    echo \"Unrecognized server software: $SERVER_SOFTWARE. Defaulting to latest Paper.\"\r\n    echo \"Starting Paper Geyser+Floodgate installation...\"\r\n    install_java_21\r\n    PROJECT=paper\r\n    SERVER_JARFILE=server.jar\r\n\r\n    # STEP 1: Fetch list of versions\r\n    VERSIONS_JSON=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT})\r\n    VERSIONS=$(echo \"$VERSIONS_JSON\" | jq -r '.versions[]')\r\n\r\n    # STEP 2: Find the latest stable version (skip anything with -rc, -pre, etc.)\r\n    SPIGOT_LATEST_STABLE_VERSION=\"\"\r\n    idx=$(echo \"$VERSIONS\" | wc -l)\r\n\r\n    while [ \"$idx\" -gt 0 ]; do\r\n        VERSION=$(echo \"$VERSIONS\" | sed -n \"${idx}p\")\r\n        case \"$VERSION\" in\r\n            *-*) \r\n                # skip pre-release versions\r\n                ;;\r\n            *)\r\n                SPIGOT_LATEST_STABLE_VERSION=$VERSION\r\n                break\r\n                ;;\r\n        esac\r\n        idx=$((idx - 1))\r\n    done\r\n\r\n    if [ -z \"$SPIGOT_LATEST_STABLE_VERSION\" ]; then\r\n        echo \"Error: Could not find a stable Paper version!\"\r\n        exit 1\r\n    fi\r\n\r\n    echo \"Latest stable Paper version: $SPIGOT_LATEST_STABLE_VERSION\"\r\n    echo \"For custom versions, checkout our FAQs.\"\r\n\r\n    # STEP 3: Fetch builds for that version\r\n    BUILDS_JSON=$(curl -s https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${SPIGOT_LATEST_STABLE_VERSION}\/builds)\r\n    BUILD_NUMBER=$(echo \"$BUILDS_JSON\" | jq -r '.builds[-1].build')\r\n    JAR_FILE_ID=$(echo \"$BUILDS_JSON\" | jq -r '.builds[-1].downloads.application.name')\r\n\r\n    if [ -z \"$BUILD_NUMBER\" ] || [ -z \"$JAR_FILE_ID\" ] || [ \"$JAR_FILE_ID\" = \"null\" ]; then\r\n        echo \"Error: Failed to resolve build for version $SPIGOT_LATEST_STABLE_VERSION\"\r\n        exit 1\r\n    fi\r\n\r\n    echo \"Using build #$BUILD_NUMBER with jar: $JAR_FILE_ID\"\r\n\r\n    # STEP 4: Construct download URL\r\n    DOWNLOAD_URL=\"https:\/\/api.papermc.io\/v2\/projects\/${PROJECT}\/versions\/${SPIGOT_LATEST_STABLE_VERSION}\/builds\/${BUILD_NUMBER}\/downloads\/${JAR_FILE_ID}\"\r\n\r\n    # STEP 5: Download Paper\r\n    cd \/mnt\/server || exit 1\r\n    if [ -f \"${SERVER_JARFILE}\" ]; then\r\n        mv \"${SERVER_JARFILE}\" \"${SERVER_JARFILE}.old\"\r\n    fi\r\n\r\n    echo \"Downloading Paper from $DOWNLOAD_URL\"\r\n    curl -L -o \"${SERVER_JARFILE}\" \"${DOWNLOAD_URL}\"\r\n\r\n    # STEP 6: server.properties\r\n    if [ ! -f server.properties ]; then\r\n        echo \"Downloading MC server.properties\"\r\n        curl -o server.properties https:\/\/raw.githubusercontent.com\/parkervcp\/eggs\/master\/minecraft\/java\/server.properties\r\n    fi\r\n\r\n \t# STEP 7: Download Geyser plugin\r\n    echo \"Installing Geyser plugin...\"\r\n    mkdir -p plugins\r\n    curl -L -o plugins\/Geyser-Spigot.jar \\\r\n        \"https:\/\/download.geysermc.org\/v2\/projects\/geyser\/versions\/latest\/builds\/latest\/downloads\/spigot\"\r\n\r\n    # STEP 8: Download Floodgate plugin\r\n    echo \"Installing Floodgate plugin...\"\r\n    mkdir -p plugins\r\n    curl -L -o plugins\/floodgate-spigot.jar \\\r\n        \"https:\/\/download.geysermc.org\/v2\/projects\/floodgate\/versions\/latest\/builds\/latest\/downloads\/spigot\"\r\n\r\n    # STEP 9: Startup command\r\n    echo 'java -Xms128M -XX:MaxRAMPercentage=95.0 -Dterminal.jline=false -Dterminal.ansi=true -jar server.jar' > startup.sh\r\n    chmod +x startup.sh\r\n    ;;\r\n    \r\nesac\r\n\r\n# Final setup and permissions\r\nchmod +x startup.sh\r\necho \"The installation process has been completed. Please click the Start button to continue.\"",
            "container": "ghcr.io\/pterodactyl\/installers:alpine",
            "entrypoint": "ash"
        }
    },
    "variables": [
        {
            "name": "Minecraft Version",
            "description": "Installs the latest version of Minecraft for your selected server software",
            "env_variable": "MINECRAFT_VERSION",
            "default_value": "Latest",
            "user_viewable": true,
            "user_editable": false,
            "rules": "nullable|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Server Software",
            "description": "Write the server software to install: Paper, Spigot, Purpur, Fabric, or NeoForge.",
            "env_variable": "SERVER_SOFTWARE",
            "default_value": "Paper",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Download Path",
            "description": "A URL to use to download a server.jar rather than the ones in the install script. This is not user viewable.",
            "env_variable": "DL_PATH",
            "default_value": "",
            "user_viewable": false,
            "user_editable": false,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Build Number",
            "description": "The build number for the paper release.\r\n\r\nLeave at latest to always get the latest version. Invalid versions will default to latest.",
            "env_variable": "BUILD_NUMBER",
            "default_value": "latest",
            "user_viewable": false,
            "user_editable": false,
            "rules": "required|string|max:20",
            "field_type": "text"
        }
    ]
}
